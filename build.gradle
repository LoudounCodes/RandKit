import org.gradle.testing.jacoco.tasks.JacocoCoverageVerification

plugins {
    id 'java-library'
    id 'jacoco'
    id 'pmd'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'org.loudouncodes'
version = '0.1.0'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(17) }
    withSourcesJar()
    withJavadocJar()
}

repositories { mavenCentral() }

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.11.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
        exceptionFormat 'full'
    }
    finalizedBy tasks.jacocoTestReport
}

spotless {
    java {
        googleJavaFormat()
        target 'src/**/*.java'
    }
}

jacoco { toolVersion = '0.8.12' }

tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        html.required = true
        xml.required  = true
        csv.required  = false
    }
}

// Coverage gate (strings are the stable tokens)
tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification).configure {
    dependsOn tasks.test
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value   = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}
check.dependsOn 'jacocoTestCoverageVerification'

// PMD (show violations, donâ€™t fail)
pmd {
    consoleOutput = true
    incrementalAnalysis = true
    ignoreFailures = true
    if (file('config/pmd/ruleset.xml').exists()) {
        ruleSets = []
        ruleSetFiles = files('config/pmd/ruleset.xml')
    }
}
tasks.withType(Pmd).configureEach {
    reports {
        html.required = true
        xml.required = false
    }
}

// ---- Strict Javadoc + links to Java 17 API
tasks.javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.addBooleanOption('Xdoclint:all', true)
    options.addBooleanOption('Werror', true)
    options.links('https://docs.oracle.com/en/java/javase/17/docs/api/')
}

// ---- Publish HTML artifacts to docs/ (for GitHub Pages)

// Make these destinations explicit, so Gradle always knows the outputs:
def docsDir             = layout.projectDirectory.dir("docs")
def docsReportsTests    = docsDir.dir("reports/tests")
def docsReportsCoverage = docsDir.dir("reports/coverage")
def docsReportsPmd      = docsDir.dir("reports/pmd")
def docsJavadoc         = docsDir.dir("javadoc")

// Copy Javadoc -> docs/javadoc/
tasks.register('copyJavadoc', Sync) {
    dependsOn tasks.javadoc
    from(layout.buildDirectory.dir("docs/javadoc"))
    into(docsJavadoc)
}

// Gradle test report -> docs/reports/tests/
tasks.register('publishTestReport', Sync) {
    dependsOn tasks.test
    from(layout.buildDirectory.dir("reports/tests/test"))
    into(docsReportsTests)
}

// JaCoCo HTML -> docs/reports/coverage/
tasks.register('publishCoverageReport', Sync) {
    dependsOn tasks.jacocoTestReport
    from(layout.buildDirectory.dir("reports/jacoco/test/html"))
    into(docsReportsCoverage)
}

// PMD HTML -> docs/reports/pmd/
tasks.register('publishPmdReports', Sync) {
    dependsOn tasks.pmdMain, tasks.pmdTest
    from(layout.buildDirectory.dir("reports/pmd"))
    into(docsReportsPmd)
}

// Aggregate publisher (now includes Javadoc!)
tasks.register('publishReports') {
    dependsOn 'publishTestReport', 'publishCoverageReport', 'publishPmdReports', 'copyJavadoc'
}

// Always publish after a build
build.finalizedBy tasks.named('publishReports')